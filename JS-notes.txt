
Lab:
Javascript Runtime:

Browser:
 has embeded javascript runtime/engine/vm

Standalone:
 Node.js 

IDE
 Microsoft vs code

///////////////////////////////

Project setup:
.............


1.select workspace

c:\session\astro\2021\

2.create project folder

c:\session\astro\2021\ js-apps\src

3.lanuch project

c:\session\astro\2021\ js-apps\src\ code .

..........................................................................................
                                        Javascript


What is Javascript?

 The javascript is programming language.

Style of javascript

 standalone styles - inital java - before java 8 -  object oriented programming language
 hybrid styles - mixing many styles in one place.java 8  hybrid style language

javascript was designed as hybrid programming language.
 
javascript supports "functional style","Object based","Event driven" .

History of javascript programming:
..................................

1989 - Web Project was started    -------Sun created Java

1990 -  The first webserver,Browser was created

1994 - Netscap started

1995 - The first netscap navigator came to access web pages 

1996 - Netscap decided to put java inside webbrowser.

----Static web----- only hand coded html pages.

1996 - CREATED Dynamic web : how to work with databases
     - CGI - C,perl.
 J2EE- Servlets,JSP
 MS  - ASP
 OPEN SOURCE - PHP.

 Server side web : create html pages on fly by including data from databases.

Netscap decided to build client side web technoloy- once html is rendered into web browser
how to change that html onfly. 

Netscap decided to create a new programming language, who recurited Brendan Eich
,the programmer , asked to create new programming language for netscap navigator.

-Objective of Project

-It should be like java but it should not be java -light weight - scripting
-deadline is 10 days.

Time line:

1.javascript project started 1995

1.first name of the language was "Mocha"
2.language was renamed to "Live Script" -1996
3.language was renamed to "java Script" -1996



After language ready, which was submitted to standard body "ECMA international"

1996---1997 : JS 1.0 =>ES 1.0

1997- 1998 :  ES 2.0: It did not come

1999 :  ES 3

2007 : ES 4

2008 : ES 5

2012-2015 : ES 6

2016  ONWARDS : es 7,es 8, ......

//////////////////////////////////////////////////////////////////////////////////////////


...........................................................................................

Compilation,Execution, Runtime:
...............................

Javascript has no independant compiler like c++/java.

Runtime: 

 It is program, written in c / c++ , any language.
 Runtime is abstraction/communication layer between os and application programms.

Types of runtime:

1.embeded runtime
  embeded into another software
 eg:
   embeded game engines...
   browsers has lot of embbeded 

   webservers which running java code : tomcat

2.standalone runtime
  which is avaiable separatly
  JVM


Javascript runtime:
...................
 it is avaiable in both mode.

Embeded mode:
  js runtime is avaiable inside every browser.

chrome : V8 
firefox : Spider Monkey
ms : chakra .

standalone mode:
  node js, which has standalone js runtime.
/////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////

Does javascript code is compiled?

 Yes! , inside javascript runtime, which has embbeded compiler.
////////////////////////////////////////////////////////////////////////////////////////////

We are going to use v8:
  "V8 is Googleâ€™s open source high-performance JavaScript and WebAssembly engine, written in C++. 
It is used in Chrome and in Node.js, 
////////////////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////////////////
Where is javascript ? what type of applications we can build using javascript?

1.javascript was created for browser only to process web documents.

Now a days  javascript is used every where.

1. javascript is in server side market : for build Webapps,webservices :Node.js
2. javascript is in mobility  : build mobile applications
3. javascript is in IOT : build any device specific applications.
/////////////////////////////////////////////////////////////////////////////////////////////

/////////////////////////////////////////////////////////////////////////////////////////////

Java Script Programming language: ES 5 AND ES 6
...............................................

1.language fundamentals
2.functional programming
3.Object based programming
4.Browser specific features
   DOM,AJAX.

Node Js:
   Build Nonblocking IO applications 

/////////////////////////////////////////////////////////////////////////////////////////

language fundamentals:

1.type system
2.variables
3.values-literals
4.operators
5.conditional and iterators


Helloworld

index.js

how to run code?

1.via browser

index.html
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=<device-width>, initial-scale=1.0">
    <title>Document</title>
</head>
<body>
    <script src="src/index.js"></script>
</body>
</html>

2.via node platform

$node src/index.js
///////////////////////////////////////////////////////////////////////////////////////////

Javascript is dynamic language:
 during runtime we can modify code.

Type system:

 How to represent data 

Strongly/Static typed languages

 The variable is verfied by the compiler during compile time

eg:
  int a =10;

  a ="hello" ; compiler will show error.

eg: c,c++,java,c#

Weakly/Dynamic typed languages


  The variable type is verifed by the runtime during execution

   def/var(keyword) variableName=value

 eg:
   var a =10;
   a="hello"
  it is perfectly valid

eg:
 js
/////////////////////////////////////////////////////////////////////////////////////////////

How to declare variables?

ES 5

var
Declares a variable, optionally initializing it to a value.

ES 6
let
Declares a block-scoped, local variable, optionally initializing it to a value.
const
Declares a block-scoped, read-only named constant.

this 
  keyword used to declare instance variables(objects)


syntax:

 keyword(var/let/const/this) variableName = value(literal)
 

//how to declare variable

var firstName="Subramanian";
console.log("First Name" + firstName);


literals : values based on it only the type of variable is identified during runtime.

literals types:

1.string
2.number
3.boolean
4.undefined
5.NaN
6.infinity
7.function
8.null
9.object

 var : is used in es 5
 let and const is used in es 6
 this : both version



Note: 
1.var,let,const all are same only but there are few differences, to be disucssed latter.
 var vs let and const.

2.In js ; is optional 


Point:

  if you are building javascript application based on es 6, recommandation is use "let and
const" always.

1.strings:

1.16 bit unicode charaters.

2.strings can be declared inside  "" or ''  or ``(back-tick) es 6 feature
   "" : inspired from java and c++
   '' : js specific notation.
  
3.string concatnation can be done
   +  and , and `foo ${variableName}`
//strings

var firstName = "Subramanian"
var lastName = 'Murugan';

console.log(" Name " + firstName + " " + lastName);
console.log(" Name ", firstName, " ", lastName);

//es 6 concatation syntax. `${variableName}` - interpolation

console.log(`Name ${firstName} ${lastName} `)

//Roles of `` notation : string concation,multi line string litreal.

var title = 'Game Portal'

var htmlDoc = "<html>" +
    "<head><title>" +
    title +
    "</title>" +
    "</head>" +
    "<body><h1>Sony Digital</h1>" +
    "</body></html>";
console.log(htmlDoc);

var newHtmlDoc = `
    <html>
      <head>
        <title>${title}</title>
    </head>
    <body><h1>Astro Gaming Site</h1>
    </body></html>
`;
console.log(newHtmlDoc);
//////////////////////////////////////////////////////////////////////////////////////////////

Numbers:

1.number size is 64 bit by default aka double.
2.It is IEEE 754 Standard.
//numbers

var qty = 10;
var price=1000000000000000000000000000;
console.log(`Qty ${qty}`);
console.log(`Price ${price}`)


Booleans:

1.represents true or false 
2.1 bit value.

//boolean

var isEnabled =true;
var isWorking=false;

console.log(`Enabled ${isEnabled}`)
console.log(`Isworking ${isWorking} `);



undefined:
..........
It is value, assigned to a variable, if no valid literal is assigned.


var firstName;
var price;
var qty;
console.log(`First Name ${firstName}`);
console.log(`price ${price} ${qty}`);

///////////////////////////////////////////////////////////////////////////////////////////

Related to Numbers:

1.NaN :Not a Number 

Not a Number but is number.
NaN represents error code.
NaN error code will come due to "numerical compuation failures".

Note:

 if you get NaN as out put, it is danger/toxic , it is runtime error, you need to fix.


When NaN will come?
 
//NaN use case 1; if you do numerical compuation against undefined

var qty; //undefined
var price = 1000;

var totalPrice = qty * price;
console.log(`Qty ${qty} price ${price} Total Price ${totalPrice}`)


Type conversion : string to number

types of Type conversion

1.implicit Type conversion
 js automatically converts string to number
2.explicit Type conversion
 js uses conversion utility apis to convert string to number.

//NAN

var qty; //undefined
var price = 1000;

var totalPrice = qty * price;
console.log(`Qty ${qty} price ${price} Total Price ${totalPrice}`)
//Type conversion

var count = "10"; // it string type but value is numerical value

//Type conversion happened here; implicit conversion
var totalCount = count * 10;
console.log(`Total Count ${totalCount}`);

//Type conversion using js built in api.
//double(64 bit) to 32 bit(integer)
var totalCounter = parseInt(count) * 10;
console.log(`Total Count ${totalCounter}`);
var totalCounterdouble = parseFloat(count,16) * 10;
console.log(`Total Count ${totalCounterdouble}`);


//Nan and type conversion
// here $100 is not numerical so during type conversion, error is thrown.
var stockValue = "$100";
var totalStock  = parseInt(stockValue) * 100;
console.log(`Total Stock ${totalStock}`);


2.infinity
div by 0


var price = 1000;
var avgPrice = price / 0;
//Avg Price Infinity
console.log(`Avg Price ${avgPrice}`);

////////////////////////////////////////////////////////////////////////////////////////////
Advanced booleans:
  
js supports booleans with value of true / false

In js every thing is true expect the following values.

Falsy Values:

1.boolean false
2.0
3.undefined
4.empty string "",''
5.NaN
6.null



//Advanced boolean

var firstName = "Subramaian";

if (firstName) {
    console.log("firstName found")
} else {
    console.log("firstName not found")
}
var lastName = "";

if (lastName) {
    console.log("lastName found")
} else {
    console.log("lastName not found")
}

var age = 18;

if (age) {
    console.log("age found")
} else {
    console.log("age not found")
}

var count = 0;

if (count) {
    console.log("count found")
} else {
    console.log("count not found")
}


var price;

if (price) {
    console.log("price found")
} else {
    console.log("price not found")
}


var totalPrice = price *100;

if (totalPrice) {
    console.log("totalPrice found")
} else {
    console.log("totalPrice not found")
}























